AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  ExecutionRoleArn:
    Type: String
    Default: arn:aws:iam::117819748843:role/lake-freeze-lambda-role

  DeploymentZone:
    Type: String
    Default: deployment-zone-117819748843

  EmrZone:
    Type: String
    Default: emr-zone-117819748843-us-east-1

  DockerImageUri:
    Type: String
    Default: 117819748843.dkr.ecr.us-east-1.amazonaws.com/weather-etl/pyspark-env:latest

  SecurityGroupIds:
    Type: CommaDelimitedList
    Default: sg-00467e8ac3c53cb3f

  SubnetIds:
    Type: CommaDelimitedList
    Default: subnet-0cdc957115446f72d

Resources:
  ETLJobTrigger:
    Type: AWS::Events::Rule
    Properties: 
      # Description: String
      Name: WeatherETLJobTrigger
      RoleArn: !Ref ExecutionRoleArn
      ScheduleExpression: "cron(0 6 * * ? *)"
      State: ENABLED
      Targets:
        - Id: ETLStepFunction
          Arn: !GetAtt StepFunctionStateMachine.Arn
          Input: "{\n  \"input\": \"{}\"\n}"
          RetryPolicy:
            MaximumEventAgeInSeconds: 300
            MaximumRetryAttempts: 3
          RoleArn: !Ref ExecutionRoleArn

  EMRServerlessApplication:
    Type: AWS::EMRServerless::Application
    DependsOn: ECRRepository
    Properties: 
      Name: WeatherETLApplication
      Architecture: X86_64
      AutoStartConfiguration: 
        Enabled: true
      AutoStopConfiguration: 
        Enabled: true
        IdleTimeoutMinutes: 1
      MaximumCapacity: 
        Cpu: 4vCPU
        Disk: 100GB
        Memory: 16GB
      ReleaseLabel: "emr-6.10.0"
      Type: Spark
      ImageConfiguration:
        ImageUri: !Ref DockerImageUri
      NetworkConfiguration:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  
  StepFunctionStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: EMRWeatherETLJobStateMachine
      RoleArn: !Ref ExecutionRoleArn
      Definition: {
            "Comment": "Runs EMR Serverless job for Weather ETL",
            "StartAt": "StartJobRun",
            "States": {
                "StartJobRun": {
                  "Type": "Task",
                  "End": true,
                  "Parameters": {
                      "Name": "Weather ETL",
                      "ClientToken.$": "States.UUID()",
                      "ApplicationId": !Ref EMRServerlessApplication,
                      "ExecutionRoleArn": !Ref ExecutionRoleArn,
                      "JobDriver": {
                        "SparkSubmit": {
                            "EntryPoint": !Sub "s3://${DeploymentZone}/weather_etl/spark_entrypoint.py",
                            "SparkSubmitParameters": !Sub "
                                --driver-memory 2G 
                                --driver-cores 2 
                                --num-executors 1 
                                --executor-memory 2G
                                --executor-cores 2
                                --conf spark.dynamicAllocation.enabled=false
                                --jars https://repo1.maven.org/maven2/org/postgresql/postgresql/42.6.0/postgresql-42.6.0.jar
                              "
                        }
                      },
                      "ConfigurationOverrides": {
                        "MonitoringConfiguration": {
                          "S3MonitoringConfiguration": {
                            "LogUri": !Sub "s3://${EmrZone}/logging/"
                          }
                        }
                      },
                      "ExecutionTimeoutMinutes": 120
                  },
                  "Resource": "arn:aws:states:::aws-sdk:emrserverless:startJobRun"
                }
            }
        }


  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "weather-etl/pyspark-env"
      RepositoryPolicyText: {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Emr Serverless Custom Image Support",
              "Effect": "Allow",
              "Principal": {
                "Service": "emr-serverless.amazonaws.com"
              },
              "Action": [
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:GetDownloadUrlForLayer"
              ]
            }
          ]
        }

  BaseECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "emr-610/python-311"
      RepositoryPolicyText: {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Emr Serverless Custom Image Support",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "ecr:*"
              ]
            }
          ]
        }
